@page "/rota"
@attribute [Authorize(Roles = "Admin, Manager, Worker")]
@using MyRota.Models
@using MyRota.Data
@using Microsoft.AspNetCore.Identity


@inject ApplicationDbContext context
@inject UserManager<Employee> _userManager
@inject SignInManager<Employee> _signInManager
@inject AuthenticationStateProvider _authState

<h3>Rota</h3>

<AuthorizeView Roles="Manager, Worker">
    <Authorized>
        @if (Emp == null)
        {
            <p>No user found.</p>
        }
        else
        {
            if (Emp.Shifts.Count > 0)
            {
                foreach (var s in ShiftsList)
                {
                    <div class="card mb-3 border-dark">
                        <div class="card-header">
                            <strong class="text-uppercase">Shift [Id: @s.Id]</strong>
                        </div>
                        <div class="list-group list-group-flush">
                            <div class="list-group-item">
                                <strong>Start:</strong> @s.StartTime
                            </div>
                            <div class="list-group-item">
                                <strong>End:</strong> @s.EndTime
                            </div>
                            <div class="list-group-item">
                                <strong>Duration:</strong> @s.Duration.TotalHours hours
                            </div>
                            <div class="list-group-item">
                                <strong>Location:</strong> @s.Branch
                            </div>
                            <div class="list-group-item">
                                <strong>Comments:</strong> @s.Comment
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>No shifts to display.</p>
            }

        }

    </Authorized>
    <NotAuthorized>
        <h1>You are not authorized!</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    public Employee Emp { get; set; }
    public List<Shift> ShiftsList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var state = await _authState.GetAuthenticationStateAsync();
        var user = state.User;
        Emp = await _userManager.GetUserAsync(user);

        var shifts =  from s in context.Set<Shift>()
                       where s.Employee.Id == Emp.Id
                       select s;

        ShiftsList = shifts.ToList();
    }


}
